FIT3077 Design Pattern


In Assignment 2a, our UML used:
7. Role

8. Abstract Factory : Client to UI <<interface>> (????) << I don't know this correct or not

10. DIP - server interface and UI interface, so that when server and UI change, no effect to the client side. Hence, there is a interface between Client and UI alos Manager and Server. 

19. Abstract Server - any changes in server will propagate to the client & client cannot easily use other servers with similar properties. Introduce an absstract interface between client and the server. The abstract interface is a hinge point where design can flex. Different server implementation can be used without affecting the client.

21. Adapter. Manager class act as Adapte. So the UI (JFrame, also as Adapteer) can retrieve data from Adaptee.

24. MVC - Some MVC Patttern. This is because from the requirement,  our design is a single user currently; also the user cannot input into the UI to update the data. So currently, we do not need a controller for interpretting the user input. We only have the Model (Manager) and View (UI,JFrame) in our UML as part of MVC. With MVC pattern, UI depends on the Manager, but Manager not depends on UI. Hence, Manager can be built and tested indepemndently of the UI. 

2.Open Closed Principle - pg7


Week 3

1. Reduction of Dependencies - pg6
A dependency exists when a change in some element of software may cause changes in another element of software.

2.Open Closed Principle - pg7
Classes should be open for extension, but closed for modification.
example: pg10; lamp and button; depends on abstraction

3. Encapsulation - pg13
Process of compartmentalizing the elements of an abstraction that constitute its structure and behaviour.

4. Connanscence - pg14
Having beeen born together, having interwined destinies in life.

5. Cohesion - pg23
Measures the interrelatedness of the methods in the external interface of a class. High cohesion is good.

Mixed Instance Cohesion - pg24
Some components which are undefined. Eg. Salesperson and commission rate as some salesperson does not have commission.

Mixed Domain Cohesion - pg25
Components which are not relevant to the domain of the class. Eg. Real and arctan

Mixed Role cohesion - pg27
Component whichi is from tthe same domain but is not part of the abstraction. Eg. Person and number of dogs, they are not intrinsic(essential)

6. Liskov substitutability Principle - pg28
For class S to be a true subtype of T, then S must conform to T.

7. Roles - pg33
One member may have many roles, eg a conference member can be special guest and also paper presenter.

8. Abstract Factory - pg11 (Some DIP Principle here)
Provides an interface for creating families of related or dependent objects without specifying their concrete classes.

9. Observer - pg18
Defines a one to many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.
Use of the Open Closed Principle and Liskov Substitution Principle.

Week 4
10. The Dependency Inversion Principle - pg15 (with OCP)
Provides mechanism for getting Open Closed Principle (no2) to work.
Our strategy should be to depend on omterfaces - abstract functions and classes - rather than concrete functions or classes.

11. The Interface Segregation Principle - pg19
A module that has several clients that use it differently, create a separate, abstract, interface for each client.

Package Principle
	- Package Cohesion Principle - pg12
	- RREP & CRP benefit customer
	- CCP benefit maintainer
12. The Release Reuse Equivalency Principle
The granule of reuse is the granule of release

13. The Common Closure Principle - pg16 (related to OCP)
Classes that change together, belong together. Closely related to Open Closed Principle

14. The Common Reuse Principle - pg20
Classes that aare not reused together should not be grouped together.


Week 5
Package Principle
	- Package Coupling Principle - pg5
15. The Acyclic Dependencies Principle - pg6
The dependencies between packages must not form cycles.

16. The Stable Dependencies Principle - pg22
Depend in the direction of stability. A package with many incoming dependencies is very stable. Calculate the metric of stability - pg26

17. The stable Abstractions Principle - pg29 (a restatement of OCP and DIP for package)
Stable package should be abstract packages. A restatement of Open Closed Principle and Dependency Inveersion Principle. Calculatee the metric of abstractness - pg31

18. Abstract Factory revisit - pg5  (with DIP, OCP, CCP & CRP, Stable Abstraction Principle, stable Dependencies Principle)

19. Abstract Server - pg14
Closely related to Abstract Factory. Client Server Relationship. Introducing an abstract interface between the client and the server.

20. Concrete Subject and Observer revisit - pg17
Use of the Open Closed Principle and Liskov Substitution Principle.

21 Adapter - pg 20
To reuse a class in a context for which it was not originallt designed.

Week 6
22. Analysis Pattern: Party - pg25 
Organizational Hierarchy. comnstraint {hierarchy}

23. 22. Analysis Pattern: Accountability - pg31 
When hierarchy is not enough in large organizations

Week 7
24. Model View Controller Pattern - pg 3 (second slides)

25. Observer with MVC - pg21 (second slides)
If need detect user input and update the UI



